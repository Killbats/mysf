{"version":3,"sources":["Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg","rectangle.png","logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Storeapp","react_default","a","createElement","className","src","imghead","rec","href","iosimg","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kGCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0RCmDzBC,mLA3CP,OAEFC,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,IAAKC,QAK9BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,IAAKE,OAG7BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,oKAMRJ,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8CAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,KAAGK,KAAK,oEACJP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,IAAK,uFAEnCJ,EAAAC,EAAAC,cAAA,KAAGK,KAAK,iEACJP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,IAAKI,iBAnClCC,IAAMC,WCMTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.243d452e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.2928664f.svg\";","module.exports = __webpack_public_path__ + \"static/media/rectangle.4dc50a68.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.81004137.png\";","import React from 'react';\nimport iosimg from './Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg';\nimport './App.css';\nimport rec from './rectangle.png';\nimport imghead from './logo.png';\n\nclass Storeapp extends React.Component{\n    render(){\n        return(\n\n      <div>\n            <div >\n                {/*header  */}\n              \n              <div className=\"App-Header\">\n              <img className=\"imghead\" src={imghead} />\n              \n              </div>\n            \n            </div>\n              <div className=\"rectang\">\n              <img className=\"imgrec\" src={rec}/>\n              \n              </div>\n              <div className=\"mysf\">\n              <img src={\"https://is1-ssl.mzstatic.com/image/thumb/Purple123/v4/64/6d/38/646d38a4-15ad-ceab-10ed-ddb2b90f7bee/AppIcon-0-1x_U007emarketing-0-0-85-220-0-10.png/246x0w.jpg\"}/>\n              </div>\n              \n\n               \n             {/*Button with flex row */}\n                <div>\n                        {/* Content */}\n                    <div>\n                        <h3>Download My Smartfren App from </h3>\n                    </div>\n                    <div className=\"but\">\n                        <a href=\"http://play.google.com/store/apps/details?id=com.smartfren&hl=en\">\n                            <img className=\"imggplay\" src={\"https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png\"} />\n                        </a> \n                        <a href=\"https://itunes.apple.com/id/app/mysmartfren/id1209898190?mt=8\">\n                            <img className=\"imgios\" src={iosimg}/>\n                        </a>\n                    </div>\n                </div>\n\n            </div>\n        )       \n    }\n}\n\nexport default Storeapp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}